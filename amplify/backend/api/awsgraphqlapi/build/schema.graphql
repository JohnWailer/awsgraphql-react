type Post {
  id: ID!
  title: String!
  body: String!
  createdAt: String!
}

type UberService {
  id: ID!
  url: String
  name_driver: String
  car_model: String
  start_city: String
  latitude: String
  longitude: String
  currency_code: String
  rate: String
}

type Query {
  getUberServiceRestApi(id: ID!): UberService
  getPost(id: ID!): Post
  listPosts(filter: ModelPostFilterInput, limit: Int, nextToken: String): ModelPostConnection
  getUberService(id: ID!): UberService
  listUberServices(filter: ModelUberServiceFilterInput, limit: Int, nextToken: String): ModelUberServiceConnection
}

enum ModelSortDirection {
  ASC
  DESC
}

type ModelPostConnection {
  items: [Post]
  nextToken: String
}

input ModelStringFilterInput {
  ne: String
  eq: String
  le: String
  lt: String
  ge: String
  gt: String
  contains: String
  notContains: String
  between: [String]
  beginsWith: String
}

input ModelIDFilterInput {
  ne: ID
  eq: ID
  le: ID
  lt: ID
  ge: ID
  gt: ID
  contains: ID
  notContains: ID
  between: [ID]
  beginsWith: ID
}

input ModelIntFilterInput {
  ne: Int
  eq: Int
  le: Int
  lt: Int
  ge: Int
  gt: Int
  contains: Int
  notContains: Int
  between: [Int]
}

input ModelFloatFilterInput {
  ne: Float
  eq: Float
  le: Float
  lt: Float
  ge: Float
  gt: Float
  contains: Float
  notContains: Float
  between: [Float]
}

input ModelBooleanFilterInput {
  ne: Boolean
  eq: Boolean
}

input ModelPostFilterInput {
  id: ModelIDFilterInput
  title: ModelStringFilterInput
  body: ModelStringFilterInput
  createdAt: ModelStringFilterInput
  and: [ModelPostFilterInput]
  or: [ModelPostFilterInput]
  not: ModelPostFilterInput
}

input CreatePostInput {
  id: ID
  title: String!
  body: String!
  createdAt: String!
}

input UpdatePostInput {
  id: ID!
  title: String
  body: String
  createdAt: String
}

input DeletePostInput {
  id: ID
}

type Mutation {
  createPost(input: CreatePostInput!): Post
  updatePost(input: UpdatePostInput!): Post
  deletePost(input: DeletePostInput!): Post
  createUberService(input: CreateUberServiceInput!): UberService
  updateUberService(input: UpdateUberServiceInput!): UberService
  deleteUberService(input: DeleteUberServiceInput!): UberService
}

type Subscription {
  onCreatePost: Post @aws_subscribe(mutations: ["createPost"])
  onUpdatePost: Post @aws_subscribe(mutations: ["updatePost"])
  onDeletePost: Post @aws_subscribe(mutations: ["deletePost"])
  onCreateUberService: UberService @aws_subscribe(mutations: ["createUberService"])
  onUpdateUberService: UberService @aws_subscribe(mutations: ["updateUberService"])
  onDeleteUberService: UberService @aws_subscribe(mutations: ["deleteUberService"])
}

type ModelUberServiceConnection {
  items: [UberService]
  nextToken: String
}

input ModelUberServiceFilterInput {
  id: ModelIDFilterInput
  url: ModelStringFilterInput
  name_driver: ModelStringFilterInput
  car_model: ModelStringFilterInput
  start_city: ModelStringFilterInput
  latitude: ModelStringFilterInput
  longitude: ModelStringFilterInput
  currency_code: ModelStringFilterInput
  rate: ModelStringFilterInput
  and: [ModelUberServiceFilterInput]
  or: [ModelUberServiceFilterInput]
  not: ModelUberServiceFilterInput
}

input CreateUberServiceInput {
  id: ID
  url: String
  name_driver: String
  car_model: String
  start_city: String
  latitude: String
  longitude: String
  currency_code: String
  rate: String
}

input UpdateUberServiceInput {
  id: ID!
  url: String
  name_driver: String
  car_model: String
  start_city: String
  latitude: String
  longitude: String
  currency_code: String
  rate: String
}

input DeleteUberServiceInput {
  id: ID
}
